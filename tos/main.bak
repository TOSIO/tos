#include <stdio.h>
#include <toscore/log/Log.h>
#include <toscore/crypto/SHA3.h>
#include <toscore/common/Common.h>
#include <toscore/utils/RLP.h>
#include <vector>
#include <string>
#include <map>

using std::cout;


//using dev::RLP;
using namespace dev;


class Net
{
public:
    int data;

    void Serialize(RLPStream& s)
    {
        s<<data;
    }

    void UnSerialize(bytes& stream)
    {
        RLP rlp(stream);
        data = rlp[0].toInt<int>();
    }
};

class CBanEntry
{
public:
    CBanEntry( int version,int64_t createTime):nVersion(version),nCreateTime(createTime){
        _net.data = 5;
    }

    void Serialize(RLPStream& s)
    {
        s.appendList(3);
        _net.Serialize(s);
        s.append(bigint(nCreateTime));
        s << nVersion;
    }

    void UnSerialize(bytes& stream)
    {
        RLP rlp(stream);
         bytes item = rlp[0].toBytes();
        _net.UnSerialize(item); 
        
        nCreateTime = rlp[1].toInt<int64_t>();
        nVersion = rlp[2].toInt<int>();
    }

    void Init()
    {
        nVersion = 0;
        nCreateTime = 0;
        _net.data = 0;
        
    }
    int nVersion;
    int64_t  nCreateTime;
    Net _net;
};



/* RLPStream& operator<<(RLPStream& stream,const CBanEntry& _data)
{
    stream.appendList(2);
    stream << _data.nVersion<<_data.nCreateTime;
    return stream;
} */


//template<typename T>
int main(int argc, char const *argv[])
{
    /* code */
    u256 big("0xde");
    printf("the big int is : %s\n",big.str().c_str());
    printf("sizeof(unsigned) : %d,sizeof(int64_t) : %d,intTraits<int64_t>::maxSize : %d\n",(int)sizeof(unsigned),(int)sizeof(int64_t),(int)intTraits<int64_t>::maxSize);
    CBanEntry ban(301,1324678979879877);
    RLPStream rlpstream;
    ban.Serialize(rlpstream);
    printf("trace 1\n");
    printf("before unserialize,ban.nVersion : %d, ban.nCreateTime : %ld, ban._net.data : %d\n",ban.nVersion, ban.nCreateTime, ban._net.data); 
    ban.Init();
    
    bytes s = rlpstream.out();
    ban.UnSerialize(s);
    printf("after unserializeban,ban.nVersion : %d, ban.nCreateTime : %ld, ban._net.data : %d\n",ban.nVersion, ban.nCreateTime, ban._net.data); 
    
    rlpstream.clear();
    unsigned char buf[12] = {0};
    rlpstream.append(vector_ref<unsigned char>(buf,12));

    printf("asdfasdf\n");
    //BOOST_LOG_INLINE_GLOBAL_LOGGER_CTOR_ARGS('dsfdfsd', 12);
    const std::string str = "13123weriouweoruweo";

    cout << str << std::endl;

    std::vector<unsigned char> valList = {'0', '1', '3', '4'};
    // std::string str1;// = dev::toBase64(valList);
    // cout<<str1<< std::endl;

    dev::bytesRef vec(valList.data(), valList.size());
    dev::RLP rlp(vec, dev::RLP::AllowNonCanon);
    // rlp::isInt();
    cout << valList.data() << std::endl;
    cout << rlp.sizeStrict() << std::endl;

    return 0;
}
